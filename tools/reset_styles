#!/usr/bin/env node

var path = require('path');

// Reset all styles in the store
var talkstore = require('../lib/talkstore');

var redis = require('redis');

function usage(me, exitcode) {
  console.log("Usage: " + me + " [--convert] <target_mapnik_version>");
  process.exit(exitcode);
}

var doConvert = false;
var MAPNIK_VERSION;

var node_path = process.argv.shift();
var script_path = process.argv.shift();
var me = path.basename(script_path);
var arg;
while ( ( arg = process.argv.shift() ) ) {
  if ( arg == '--convert' ) {
    doConvert = true;
  } else if ( ! MAPNIK_VERSION ) {
    MAPNIK_VERSION = arg;
  }
  else {
    usage(me, 1);
  }
}

if ( ! MAPNIK_VERSION ) usage(me, 1);

var REDIS_PORT = 6379; // TODO: make a command line parameter

var dbnum = 0;

var mml_store = new talkstore.MMLStore({port:REDIS_PORT}, {mapnik_version:MAPNIK_VERSION});

var failures = [];

var client = redis.createClient(REDIS_PORT, 'localhost');
client.on('connect', function() {
  client.select(dbnum);
  client.keys('map_style|*', function(err, matches) {

    processNext = function() {
      if ( ! matches.length ) process.exit(failures.length);
      var k = matches.shift();

      if ( /map_style\|.*\|.*\|/.test(k) ) {
        //console.warn("Key " + k + " is EXTENDED, skipping");
        processNext();
        return;
      }

      var params = RegExp(/map_style\|(.*)\|(.*)/).exec(k);
      if ( ! params ) {
        console.warn("Key " + k + " is INVALID, skipping");
        processNext();
        return;
      }
      var db = params[1];
      var tab = params[2];
      var out = 'map_style|' + db + '|' + tab + ': ';

      var mml_builder = mml_store.mml_builder({dbname:db, table:tab},
                                              function(err, payload) {

          if ( err ) { console.warn(out + err.message); failures.push(k); processNext(); }
          else {
            mml_builder.resetStyle(function(err, data) {
              if ( err ) { console.warn(out + err.message); failures.push(k); }
              else console.log(out + 'OK' + ( doConvert ? ' (converted)' : '' ));
              processNext();
            }, doConvert);
          }
      });

    };

    processNext();

  });

});
